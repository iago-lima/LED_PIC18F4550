

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon May  1 23:56:10 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.41
    22                           ; Generated 25/01/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	idataCOMRAM
    57  0009EE                     __pidataCOMRAM:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _b
    61  0009EE  0001               	dw	1
    62                           
    63                           ;initializer for _a
    64  0009F0  0001               	dw	1
    65  0000                     _PORTE	set	3972
    66  0000                     _TRISE	set	3990
    67  0000                     _TRISD	set	3989
    68  0000                     _PORTD	set	3971
    69  0000                     _PORTEbits	set	3972
    70                           
    71                           	psect	smallconst
    72  000800                     __psmallconst:
    73                           	opt stack 0
    74  000800  00                 	db	0
    75  000801                     STR_1:
    76  000801  52                 	db	82	;'R'
    77  000802  6F                 	db	111	;'o'
    78  000803  62                 	db	98	;'b'
    79  000804  65                 	db	101	;'e'
    80  000805  72                 	db	114	;'r'
    81  000806  74                 	db	116	;'t'
    82  000807  20                 	db	32
    83  000808  43                 	db	67	;'C'
    84  000809  61                 	db	97	;'a'
    85  00080A  62                 	db	98	;'b'
    86  00080B  72                 	db	114	;'r'
    87  00080C  61                 	db	97	;'a'
    88  00080D  6C                 	db	108	;'l'
    89  00080E  00                 	db	0
    90  00080F                     STR_2:
    91  00080F  54                 	db	84	;'T'
    92  000810  65                 	db	101	;'e'
    93  000811  73                 	db	115	;'s'
    94  000812  74                 	db	116	;'t'
    95  000813  65                 	db	101	;'e'
    96  000814  65                 	db	101	;'e'
    97  000815  65                 	db	101	;'e'
    98  000816  00                 	db	0
    99                           
   100                           ; #config settings
   101  000817  00                 	db	0	; dummy byte at the end
   102  0000                     
   103                           	psect	cinit
   104  000950                     __pcinit:
   105                           	opt stack 0
   106  000950                     start_initialization:
   107                           	opt stack 0
   108  000950                     __initialization:
   109                           	opt stack 0
   110                           
   111                           ; Initialize objects allocated to COMRAM (4 bytes)
   112                           ; load TBLPTR registers with __pidataCOMRAM
   113  000950  0EEE               	movlw	low __pidataCOMRAM
   114  000952  6EF6               	movwf	tblptrl,c
   115  000954  0E09               	movlw	high __pidataCOMRAM
   116  000956  6EF7               	movwf	tblptrh,c
   117  000958  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   118  00095A  6EF8               	movwf	tblptru,c
   119  00095C  EE00  F011         	lfsr	0,__pdataCOMRAM
   120  000960  EE10 F004          	lfsr	1,4
   121  000964                     copy_data0:
   122  000964  0009               	tblrd		*+
   123  000966  CFF5 FFEE          	movff	tablat,postinc0
   124  00096A  50E5               	movf	postdec1,w,c
   125  00096C  50E1               	movf	fsr1l,w,c
   126  00096E  E1FA               	bnz	copy_data0
   127  000970                     end_of_initialization:
   128                           	opt stack 0
   129  000970                     __end_of__initialization:
   130                           	opt stack 0
   131  000970  0E00               	movlw	low (__Lsmallconst shr (0+16))
   132  000972  6EF8               	movwf	tblptru,c
   133  000974  0E08               	movlw	high __Lsmallconst
   134  000976  6EF7               	movwf	tblptrh,c
   135  000978  0100               	movlb	0
   136  00097A  EF52  F004         	goto	_main	;jump to C main() function
   137                           tblptru	equ	0xFF8
   138                           tblptrh	equ	0xFF7
   139                           tblptrl	equ	0xFF6
   140                           tablat	equ	0xFF5
   141                           postinc0	equ	0xFEE
   142                           postdec1	equ	0xFE5
   143                           fsr1l	equ	0xFE1
   144                           
   145                           	psect	dataCOMRAM
   146  000011                     __pdataCOMRAM:
   147                           	opt stack 0
   148  000011                     _b:
   149                           	opt stack 0
   150  000011                     	ds	2
   151  000013                     _a:
   152                           	opt stack 0
   153  000013                     	ds	2
   154                           tblptru	equ	0xFF8
   155                           tblptrh	equ	0xFF7
   156                           tblptrl	equ	0xFF6
   157                           tablat	equ	0xFF5
   158                           postinc0	equ	0xFEE
   159                           postdec1	equ	0xFE5
   160                           fsr1l	equ	0xFE1
   161                           
   162                           	psect	cstackCOMRAM
   163  000001                     __pcstackCOMRAM:
   164                           	opt stack 0
   165  000001                     ??_enable:
   166  000001                     
   167                           ; 1 bytes @ 0x0
   168  000001                     	ds	1
   169  000002                     sendCMD@value:
   170                           	opt stack 0
   171                           
   172                           ; 2 bytes @ 0x1
   173  000002                     	ds	2
   174  000004                     ??_sendCMD:
   175                           
   176                           ; 1 bytes @ 0x3
   177  000004                     	ds	1
   178  000005                     ??_initLCD:
   179  000005                     setLine@a:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x4
   183  000005                     	ds	2
   184  000007                     setLine@b:
   185                           	opt stack 0
   186                           
   187                           ; 2 bytes @ 0x6
   188  000007                     	ds	2
   189  000009                     ??_writeChar:
   190  000009                     setAB@c:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x8
   194  000009                     	ds	1
   195  00000A                     writeChar@value:
   196                           	opt stack 0
   197                           
   198                           ; 1 bytes @ 0x9
   199  00000A                     	ds	1
   200  00000B                     writeLCD@a:
   201                           	opt stack 0
   202  00000B                     setAB@d:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0xA
   206  00000B                     	ds	2
   207  00000D                     ??_writeLCD:
   208  00000D                     
   209                           ; 1 bytes @ 0xC
   210  00000D                     	ds	2
   211  00000F                     writeLCD@i:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0xE
   215  00000F                     	ds	2
   216  000011                     tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           postdec1	equ	0xFE5
   222                           fsr1l	equ	0xFE1
   223                           
   224                           ; 1 bytes @ 0x10
   225 ;;
   226 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   227 ;;
   228 ;; *************** function _main *****************
   229 ;; Defined at:
   230 ;;		line 175 in file "main.c"
   231 ;; Parameters:    Size  Location     Type
   232 ;;		None
   233 ;; Auto vars:     Size  Location     Type
   234 ;;		None
   235 ;; Return value:  Size  Location     Type
   236 ;;                  1    wreg      void 
   237 ;; Registers used:
   238 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   239 ;; Tracked objects:
   240 ;;		On entry : 0/0
   241 ;;		On exit  : 0/0
   242 ;;		Unchanged: 0/0
   243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   244 ;;      Params:         0       0       0       0       0       0       0       0       0
   245 ;;      Locals:         0       0       0       0       0       0       0       0       0
   246 ;;      Temps:          0       0       0       0       0       0       0       0       0
   247 ;;      Totals:         0       0       0       0       0       0       0       0       0
   248 ;;Total ram usage:        0 bytes
   249 ;; Hardware stack levels required when called:    5
   250 ;; This function calls:
   251 ;;		_initLCD
   252 ;;		_setAB
   253 ;;		_writeLCD
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text0
   260  0008A4                     __ptext0:
   261                           	opt stack 0
   262  0008A4                     _main:
   263                           	opt stack 26
   264                           
   265                           ;main.c: 176: TRISD = 0x00;
   266                           
   267                           ;incstack = 0
   268  0008A4  0E00               	movlw	0
   269  0008A6  6E95               	movwf	3989,c	;volatile
   270                           
   271                           ;main.c: 177: TRISE = 0x00;
   272  0008A8  0E00               	movlw	0
   273  0008AA  6E96               	movwf	3990,c	;volatile
   274                           
   275                           ;main.c: 179: PORTE = 0x00;
   276  0008AC  0E00               	movlw	0
   277  0008AE  6E84               	movwf	3972,c	;volatile
   278                           
   279                           ;main.c: 181: initLCD();
   280  0008B0  EC31  F004         	call	_initLCD	;wreg free
   281                           
   282                           ;main.c: 182: writeLCD("Robert Cabral");
   283  0008B4  0E01               	movlw	low STR_1
   284  0008B6  6E0B               	movwf	writeLCD@a,c
   285  0008B8  0E08               	movlw	high STR_1
   286  0008BA  6E0C               	movwf	writeLCD@a+1,c
   287  0008BC  EC0C  F004         	call	_writeLCD	;wreg free
   288                           
   289                           ;main.c: 183: setAB(2,2);
   290  0008C0  0E00               	movlw	0
   291  0008C2  6E0A               	movwf	setAB@c+1,c
   292  0008C4  0E02               	movlw	2
   293  0008C6  6E09               	movwf	setAB@c,c
   294  0008C8  0E00               	movlw	0
   295  0008CA  6E0C               	movwf	setAB@d+1,c
   296  0008CC  0E02               	movlw	2
   297  0008CE  6E0B               	movwf	setAB@d,c
   298  0008D0  ECD6  F004         	call	_setAB	;wreg free
   299                           
   300                           ;main.c: 184: writeLCD("Testeee");
   301  0008D4  0E0F               	movlw	low STR_2
   302  0008D6  6E0B               	movwf	writeLCD@a,c
   303  0008D8  0E08               	movlw	high STR_2
   304  0008DA  6E0C               	movwf	writeLCD@a+1,c
   305  0008DC  EC0C  F004         	call	_writeLCD	;wreg free
   306  0008E0                     l49:
   307  0008E0  D7FF               	goto	l49
   308  0008E2                     __end_of_main:
   309                           	opt stack 0
   310                           tblptru	equ	0xFF8
   311                           tblptrh	equ	0xFF7
   312                           tblptrl	equ	0xFF6
   313                           tablat	equ	0xFF5
   314                           postinc0	equ	0xFEE
   315                           postdec1	equ	0xFE5
   316                           fsr1l	equ	0xFE1
   317                           
   318 ;; *************** function _writeLCD *****************
   319 ;; Defined at:
   320 ;;		line 121 in file "main.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;  a               2   10[COMRAM] PTR unsigned char 
   323 ;;		 -> STR_2(8), STR_1(14), 
   324 ;; Auto vars:     Size  Location     Type
   325 ;;  i               2   14[COMRAM] int 
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   335 ;;      Params:         2       0       0       0       0       0       0       0       0
   336 ;;      Locals:         2       0       0       0       0       0       0       0       0
   337 ;;      Temps:          2       0       0       0       0       0       0       0       0
   338 ;;      Totals:         6       0       0       0       0       0       0       0       0
   339 ;;Total ram usage:        6 bytes
   340 ;; Hardware stack levels used:    1
   341 ;; Hardware stack levels required when called:    4
   342 ;; This function calls:
   343 ;;		_writeChar
   344 ;; This function is called by:
   345 ;;		_main
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           	psect	text1
   350  000818                     __ptext1:
   351                           	opt stack 0
   352  000818                     _writeLCD:
   353                           	opt stack 26
   354                           
   355                           ;main.c: 122: int i = 0;
   356                           
   357                           ;incstack = 0
   358  000818  0E00               	movlw	0
   359  00081A  6E10               	movwf	writeLCD@i+1,c
   360  00081C  0E00               	movlw	0
   361  00081E  6E0F               	movwf	writeLCD@i,c
   362                           
   363                           ;main.c: 123: for(;a[i] != '\0';i++)
   364  000820  D010               	goto	l762
   365  000822                     l758:
   366                           
   367                           ;main.c: 124: writeChar(a[i]);
   368  000822  500F               	movf	writeLCD@i,w,c
   369  000824  240B               	addwf	writeLCD@a,w,c
   370  000826  6E0D               	movwf	??_writeLCD& (0+255),c
   371  000828  5010               	movf	writeLCD@i+1,w,c
   372  00082A  200C               	addwfc	writeLCD@a+1,w,c
   373  00082C  6E0E               	movwf	(??_writeLCD+1)& (0+255),c
   374  00082E  C00D  FFF6         	movff	??_writeLCD,tblptrl
   375  000832  C00E  FFF7         	movff	??_writeLCD+1,tblptrh
   376  000836                     	if	0	;tblptru may be non-zero
   377  000836                     	endif
   378  000836                     	if	0	;tblptru may be non-zero
   379  000836                     	endif
   380  000836  0008               	tblrd		*
   381  000838  50F5               	movf	tablat,w,c
   382  00083A  EC71  F004         	call	_writeChar
   383  00083E  4A0F               	infsnz	writeLCD@i,f,c
   384  000840  2A10               	incf	writeLCD@i+1,f,c
   385  000842                     l762:
   386  000842  500F               	movf	writeLCD@i,w,c
   387  000844  240B               	addwf	writeLCD@a,w,c
   388  000846  6E0D               	movwf	??_writeLCD& (0+255),c
   389  000848  5010               	movf	writeLCD@i+1,w,c
   390  00084A  200C               	addwfc	writeLCD@a+1,w,c
   391  00084C  6E0E               	movwf	(??_writeLCD+1)& (0+255),c
   392  00084E  C00D  FFF6         	movff	??_writeLCD,tblptrl
   393  000852  C00E  FFF7         	movff	??_writeLCD+1,tblptrh
   394  000856                     	if	0	;tblptru may be non-zero
   395  000856                     	endif
   396  000856                     	if	0	;tblptru may be non-zero
   397  000856                     	endif
   398  000856  0008               	tblrd		*
   399  000858  50F5               	movf	tablat,w,c
   400  00085A  0900               	iorlw	0
   401  00085C  B4D8               	btfsc	status,2,c
   402  00085E  0012               	return	
   403  000860  D7E0               	goto	l758
   404  000862                     __end_of_writeLCD:
   405                           	opt stack 0
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           postdec1	equ	0xFE5
   412                           fsr1l	equ	0xFE1
   413                           status	equ	0xFD8
   414                           
   415 ;; *************** function _writeChar *****************
   416 ;; Defined at:
   417 ;;		line 112 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;  value           1    wreg     unsigned char 
   420 ;; Auto vars:     Size  Location     Type
   421 ;;  value           1    9[COMRAM] unsigned char 
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   431 ;;      Params:         0       0       0       0       0       0       0       0       0
   432 ;;      Locals:         1       0       0       0       0       0       0       0       0
   433 ;;      Temps:          1       0       0       0       0       0       0       0       0
   434 ;;      Totals:         2       0       0       0       0       0       0       0       0
   435 ;;Total ram usage:        2 bytes
   436 ;; Hardware stack levels used:    1
   437 ;; Hardware stack levels required when called:    3
   438 ;; This function calls:
   439 ;;		_enable
   440 ;;		_setLine
   441 ;; This function is called by:
   442 ;;		_writeLCD
   443 ;; This function uses a non-reentrant model
   444 ;;
   445                           
   446                           	psect	text2
   447  0008E2                     __ptext2:
   448                           	opt stack 0
   449  0008E2                     _writeChar:
   450                           	opt stack 26
   451                           
   452                           ;incstack = 0
   453                           ;writeChar@value stored from wreg
   454  0008E2  6E0A               	movwf	writeChar@value,c
   455                           
   456                           ;main.c: 113: PORTEbits.RE2 = 1;
   457  0008E4  8484               	bsf	3972,2,c	;volatile
   458                           
   459                           ;main.c: 114: PORTD = value;
   460  0008E6  C00A  FF83         	movff	writeChar@value,3971	;volatile
   461                           
   462                           ;main.c: 115: enable();
   463  0008EA  EC8D  F004         	call	_enable	;wreg free
   464                           
   465                           ;main.c: 116: _delay((unsigned long)((10)*(8000000/4000.0)));
   466  0008EE  0E1A               	movlw	26
   467  0008F0  6E09               	movwf	??_writeChar& (0+255),c
   468  0008F2  0EF8               	movlw	248
   469  0008F4                     u77:
   470  0008F4  2EE8               	decfsz	wreg,f,c
   471  0008F6  D7FE               	bra	u77
   472  0008F8  2E09               	decfsz	??_writeChar& (0+255),f,c
   473  0008FA  D7FC               	bra	u77
   474  0008FC  D000               	nop2	
   475                           
   476                           ;main.c: 117: PORTEbits.RE2 = 0;
   477  0008FE  9484               	bcf	3972,2,c	;volatile
   478                           
   479                           ;main.c: 118: setLine(a++,b);
   480  000900  C013  F005         	movff	_a,setLine@a
   481  000904  C014  F006         	movff	_a+1,setLine@a+1
   482  000908  C011  F007         	movff	_b,setLine@b
   483  00090C  C012  F008         	movff	_b+1,setLine@b+1
   484  000910  ECBF  F004         	call	_setLine	;wreg free
   485  000914  4A13               	infsnz	_a,f,c
   486  000916  2A14               	incf	_a+1,f,c
   487  000918  0012               	return		;funcret
   488  00091A                     __end_of_writeChar:
   489                           	opt stack 0
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           postinc0	equ	0xFEE
   495                           wreg	equ	0xFE8
   496                           postdec1	equ	0xFE5
   497                           fsr1l	equ	0xFE1
   498                           status	equ	0xFD8
   499                           
   500 ;; *************** function _setAB *****************
   501 ;; Defined at:
   502 ;;		line 169 in file "main.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;  c               2    8[COMRAM] int 
   505 ;;  d               2   10[COMRAM] int 
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, status,2, status,0, cstack
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   517 ;;      Params:         4       0       0       0       0       0       0       0       0
   518 ;;      Locals:         0       0       0       0       0       0       0       0       0
   519 ;;      Temps:          0       0       0       0       0       0       0       0       0
   520 ;;      Totals:         4       0       0       0       0       0       0       0       0
   521 ;;Total ram usage:        4 bytes
   522 ;; Hardware stack levels used:    1
   523 ;; Hardware stack levels required when called:    3
   524 ;; This function calls:
   525 ;;		_setLine
   526 ;; This function is called by:
   527 ;;		_main
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           	psect	text3
   532  0009AC                     __ptext3:
   533                           	opt stack 0
   534  0009AC                     _setAB:
   535                           	opt stack 27
   536                           
   537                           ;main.c: 170: a = c;
   538                           
   539                           ;incstack = 0
   540  0009AC  C009  F013         	movff	setAB@c,_a
   541  0009B0  C00A  F014         	movff	setAB@c+1,_a+1
   542                           
   543                           ;main.c: 171: b = d;
   544  0009B4  C00B  F011         	movff	setAB@d,_b
   545  0009B8  C00C  F012         	movff	setAB@d+1,_b+1
   546                           
   547                           ;main.c: 172: setLine(c,d);
   548  0009BC  C009  F005         	movff	setAB@c,setLine@a
   549  0009C0  C00A  F006         	movff	setAB@c+1,setLine@a+1
   550  0009C4  C00B  F007         	movff	setAB@d,setLine@b
   551  0009C8  C00C  F008         	movff	setAB@d+1,setLine@b+1
   552  0009CC  ECBF  F004         	call	_setLine	;wreg free
   553  0009D0  0012               	return		;funcret
   554  0009D2                     __end_of_setAB:
   555                           	opt stack 0
   556                           tblptru	equ	0xFF8
   557                           tblptrh	equ	0xFF7
   558                           tblptrl	equ	0xFF6
   559                           tablat	equ	0xFF5
   560                           postinc0	equ	0xFEE
   561                           wreg	equ	0xFE8
   562                           postdec1	equ	0xFE5
   563                           fsr1l	equ	0xFE1
   564                           status	equ	0xFD8
   565                           
   566 ;; *************** function _setLine *****************
   567 ;; Defined at:
   568 ;;		line 97 in file "main.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;  a               2    4[COMRAM] int 
   571 ;;  b               2    6[COMRAM] int 
   572 ;; Auto vars:     Size  Location     Type
   573 ;;		None
   574 ;; Return value:  Size  Location     Type
   575 ;;                  1    wreg      void 
   576 ;; Registers used:
   577 ;;		wreg, status,2, status,0, cstack
   578 ;; Tracked objects:
   579 ;;		On entry : 0/0
   580 ;;		On exit  : 0/0
   581 ;;		Unchanged: 0/0
   582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   583 ;;      Params:         4       0       0       0       0       0       0       0       0
   584 ;;      Locals:         0       0       0       0       0       0       0       0       0
   585 ;;      Temps:          0       0       0       0       0       0       0       0       0
   586 ;;      Totals:         4       0       0       0       0       0       0       0       0
   587 ;;Total ram usage:        4 bytes
   588 ;; Hardware stack levels used:    1
   589 ;; Hardware stack levels required when called:    2
   590 ;; This function calls:
   591 ;;		_sendCMD
   592 ;; This function is called by:
   593 ;;		_writeChar
   594 ;;		_setAB
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text4
   599  00097E                     __ptext4:
   600                           	opt stack 0
   601  00097E                     _setLine:
   602                           	opt stack 26
   603                           
   604                           ;main.c: 98: if(b == 2)
   605                           
   606                           ;incstack = 0
   607  00097E  0E02               	movlw	2
   608  000980  1807               	xorwf	setLine@b,w,c
   609  000982  1008               	iorwf	setLine@b+1,w,c
   610  000984  A4D8               	btfss	status,2,c
   611  000986  D009               	goto	l738
   612                           
   613                           ;main.c: 99: sendCMD(0xC0 + a);
   614  000988  0EC0               	movlw	192
   615  00098A  2405               	addwf	setLine@a,w,c
   616  00098C  6E02               	movwf	sendCMD@value,c
   617  00098E  0E00               	movlw	0
   618  000990  2006               	addwfc	setLine@a+1,w,c
   619  000992  6E03               	movwf	sendCMD@value+1,c
   620  000994  ECE9  F004         	call	_sendCMD	;wreg free
   621  000998  0012               	return	
   622  00099A                     l738:
   623                           
   624                           ;main.c: 100: else
   625                           ;main.c: 101: sendCMD(0x80 + a);
   626  00099A  0E80               	movlw	128
   627  00099C  2405               	addwf	setLine@a,w,c
   628  00099E  6E02               	movwf	sendCMD@value,c
   629  0009A0  0E00               	movlw	0
   630  0009A2  2006               	addwfc	setLine@a+1,w,c
   631  0009A4  6E03               	movwf	sendCMD@value+1,c
   632  0009A6  ECE9  F004         	call	_sendCMD	;wreg free
   633  0009AA  0012               	return	
   634  0009AC                     __end_of_setLine:
   635                           	opt stack 0
   636                           tblptru	equ	0xFF8
   637                           tblptrh	equ	0xFF7
   638                           tblptrl	equ	0xFF6
   639                           tablat	equ	0xFF5
   640                           postinc0	equ	0xFEE
   641                           wreg	equ	0xFE8
   642                           postdec1	equ	0xFE5
   643                           fsr1l	equ	0xFE1
   644                           status	equ	0xFD8
   645                           
   646 ;; *************** function _initLCD *****************
   647 ;; Defined at:
   648 ;;		line 104 in file "main.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;		None
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   662 ;;      Params:         0       0       0       0       0       0       0       0       0
   663 ;;      Locals:         0       0       0       0       0       0       0       0       0
   664 ;;      Temps:          1       0       0       0       0       0       0       0       0
   665 ;;      Totals:         1       0       0       0       0       0       0       0       0
   666 ;;Total ram usage:        1 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    2
   669 ;; This function calls:
   670 ;;		_sendCMD
   671 ;; This function is called by:
   672 ;;		_main
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text5
   677  000862                     __ptext5:
   678                           	opt stack 0
   679  000862                     _initLCD:
   680                           	opt stack 28
   681                           
   682                           ;main.c: 105: sendCMD(0x80);
   683                           
   684                           ;incstack = 0
   685  000862  0E00               	movlw	0
   686  000864  6E03               	movwf	sendCMD@value+1,c
   687  000866  0E80               	movlw	128
   688  000868  6E02               	movwf	sendCMD@value,c
   689  00086A  ECE9  F004         	call	_sendCMD	;wreg free
   690                           
   691                           ;main.c: 106: sendCMD(0x30);
   692  00086E  0E00               	movlw	0
   693  000870  6E03               	movwf	sendCMD@value+1,c
   694  000872  0E30               	movlw	48
   695  000874  6E02               	movwf	sendCMD@value,c
   696  000876  ECE9  F004         	call	_sendCMD	;wreg free
   697                           
   698                           ;main.c: 107: sendCMD(0x38);
   699  00087A  0E00               	movlw	0
   700  00087C  6E03               	movwf	sendCMD@value+1,c
   701  00087E  0E38               	movlw	56
   702  000880  6E02               	movwf	sendCMD@value,c
   703  000882  ECE9  F004         	call	_sendCMD	;wreg free
   704                           
   705                           ;main.c: 108: sendCMD(0xf);
   706  000886  0E00               	movlw	0
   707  000888  6E03               	movwf	sendCMD@value+1,c
   708  00088A  0E0F               	movlw	15
   709  00088C  6E02               	movwf	sendCMD@value,c
   710  00088E  ECE9  F004         	call	_sendCMD	;wreg free
   711                           
   712                           ;main.c: 109: _delay((unsigned long)((10)*(8000000/4000.0)));
   713  000892  0E1A               	movlw	26
   714  000894  6E05               	movwf	??_initLCD& (0+255),c
   715  000896  0EF8               	movlw	248
   716  000898                     u87:
   717  000898  2EE8               	decfsz	wreg,f,c
   718  00089A  D7FE               	bra	u87
   719  00089C  2E05               	decfsz	??_initLCD& (0+255),f,c
   720  00089E  D7FC               	bra	u87
   721  0008A0  D000               	nop2	
   722  0008A2  0012               	return		;funcret
   723  0008A4                     __end_of_initLCD:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           postdec1	equ	0xFE5
   732                           fsr1l	equ	0xFE1
   733                           status	equ	0xFD8
   734                           
   735 ;; *************** function _sendCMD *****************
   736 ;; Defined at:
   737 ;;		line 90 in file "main.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  value           2    1[COMRAM] int 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;		None
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   751 ;;      Params:         2       0       0       0       0       0       0       0       0
   752 ;;      Locals:         0       0       0       0       0       0       0       0       0
   753 ;;      Temps:          1       0       0       0       0       0       0       0       0
   754 ;;      Totals:         3       0       0       0       0       0       0       0       0
   755 ;;Total ram usage:        3 bytes
   756 ;; Hardware stack levels used:    1
   757 ;; Hardware stack levels required when called:    1
   758 ;; This function calls:
   759 ;;		_enable
   760 ;; This function is called by:
   761 ;;		_setLine
   762 ;;		_initLCD
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text6
   767  0009D2                     __ptext6:
   768                           	opt stack 0
   769  0009D2                     _sendCMD:
   770                           	opt stack 26
   771                           
   772                           ;main.c: 91: PORTEbits.RE2 = 0;
   773                           
   774                           ;incstack = 0
   775  0009D2  9484               	bcf	3972,2,c	;volatile
   776                           
   777                           ;main.c: 92: PORTD = value;
   778  0009D4  C002  FF83         	movff	sendCMD@value,3971	;volatile
   779                           
   780                           ;main.c: 93: enable();
   781  0009D8  EC8D  F004         	call	_enable	;wreg free
   782                           
   783                           ;main.c: 94: _delay((unsigned long)((10)*(8000000/4000.0)));
   784  0009DC  0E1A               	movlw	26
   785  0009DE  6E04               	movwf	??_sendCMD& (0+255),c
   786  0009E0  0EF8               	movlw	248
   787  0009E2                     u97:
   788  0009E2  2EE8               	decfsz	wreg,f,c
   789  0009E4  D7FE               	bra	u97
   790  0009E6  2E04               	decfsz	??_sendCMD& (0+255),f,c
   791  0009E8  D7FC               	bra	u97
   792  0009EA  D000               	nop2	
   793  0009EC  0012               	return		;funcret
   794  0009EE                     __end_of_sendCMD:
   795                           	opt stack 0
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           postdec1	equ	0xFE5
   803                           fsr1l	equ	0xFE1
   804                           status	equ	0xFD8
   805                           
   806 ;; *************** function _enable *****************
   807 ;; Defined at:
   808 ;;		line 76 in file "main.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         0       0       0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0       0       0
   824 ;;      Temps:          1       0       0       0       0       0       0       0       0
   825 ;;      Totals:         1       0       0       0       0       0       0       0       0
   826 ;;Total ram usage:        1 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; This function calls:
   829 ;;		Nothing
   830 ;; This function is called by:
   831 ;;		_sendCMD
   832 ;;		_writeChar
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text7
   837  00091A                     __ptext7:
   838                           	opt stack 0
   839  00091A                     _enable:
   840                           	opt stack 26
   841                           
   842                           ;main.c: 77: if(PORTEbits.RE1==1)
   843                           
   844                           ;incstack = 0
   845  00091A  A284               	btfss	3972,1,c	;volatile
   846  00091C  D002               	goto	l19
   847                           
   848                           ;main.c: 78: PORTEbits.RE1=0;
   849  00091E  9284               	bcf	3972,1,c	;volatile
   850  000920  D001               	goto	l670
   851  000922                     l19:
   852                           
   853                           ;main.c: 79: else
   854                           ;main.c: 80: PORTEbits.RE1=1;
   855  000922  8284               	bsf	3972,1,c	;volatile
   856  000924                     l670:
   857                           
   858                           ;main.c: 81: _delay((unsigned long)((10)*(8000000/4000.0)));
   859  000924  0E1A               	movlw	26
   860  000926  6E01               	movwf	??_enable& (0+255),c
   861  000928  0EF8               	movlw	248
   862  00092A                     u107:
   863  00092A  2EE8               	decfsz	wreg,f,c
   864  00092C  D7FE               	bra	u107
   865  00092E  2E01               	decfsz	??_enable& (0+255),f,c
   866  000930  D7FC               	bra	u107
   867  000932  D000               	nop2	
   868                           
   869                           ;main.c: 83: if(PORTEbits.RE1==1)
   870  000934  A284               	btfss	3972,1,c	;volatile
   871  000936  D002               	goto	l21
   872                           
   873                           ;main.c: 84: PORTEbits.RE1=0;
   874  000938  9284               	bcf	3972,1,c	;volatile
   875  00093A  D001               	goto	l676
   876  00093C                     l21:
   877                           
   878                           ;main.c: 85: else
   879                           ;main.c: 86: PORTEbits.RE1=1;
   880  00093C  8284               	bsf	3972,1,c	;volatile
   881  00093E                     l676:
   882                           
   883                           ;main.c: 87: _delay((unsigned long)((10)*(8000000/4000.0)));
   884  00093E  0E1A               	movlw	26
   885  000940  6E01               	movwf	??_enable& (0+255),c
   886  000942  0EF8               	movlw	248
   887  000944                     u117:
   888  000944  2EE8               	decfsz	wreg,f,c
   889  000946  D7FE               	bra	u117
   890  000948  2E01               	decfsz	??_enable& (0+255),f,c
   891  00094A  D7FC               	bra	u117
   892  00094C  D000               	nop2	
   893  00094E  0012               	return		;funcret
   894  000950                     __end_of_enable:
   895                           	opt stack 0
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           tblptrl	equ	0xFF6
   899                           tablat	equ	0xFF5
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postdec1	equ	0xFE5
   903                           fsr1l	equ	0xFE1
   904                           status	equ	0xFD8
   905                           tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           tblptrl	equ	0xFF6
   908                           tablat	equ	0xFF5
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           postdec1	equ	0xFE5
   912                           fsr1l	equ	0xFE1
   913                           status	equ	0xFD8
   914                           
   915                           	psect	rparam
   916  0000                     tblptru	equ	0xFF8
   917                           tblptrh	equ	0xFF7
   918                           tblptrl	equ	0xFF6
   919                           tablat	equ	0xFF5
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           postdec1	equ	0xFE5
   923                           fsr1l	equ	0xFE1
   924                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    0
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      20
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    writeLCD@a	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[8]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_writeLCD
    _writeLCD->_writeChar
    _writeChar->_setLine
    _setAB->_setLine
    _setLine->_sendCMD
    _initLCD->_sendCMD
    _sendCMD->_enable

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2318
                            _initLCD
                              _setAB
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             6     4      2     968
                                             10 COMRAM     6     4      2
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     2      0     750
                                              8 COMRAM     2     2      0
                             _enable
                            _setLine
 ---------------------------------------------------------------------------------
 (1) _setAB                                                4     0      4     944
                                              8 COMRAM     4     0      4
                            _setLine
 ---------------------------------------------------------------------------------
 (3) _setLine                                              4     0      4     728
                                              4 COMRAM     4     0      4
                            _sendCMD
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     406
                                              4 COMRAM     1     1      0
                            _sendCMD
 ---------------------------------------------------------------------------------
 (4) _sendCMD                                              3     1      2     406
                                              1 COMRAM     3     1      2
                             _enable
 ---------------------------------------------------------------------------------
 (5) _enable                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _sendCMD
       _enable
   _setAB
     _setLine
       _sendCMD
         _enable
   _writeLCD
     _writeChar
       _enable
       _setLine
         _sendCMD
           _enable

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     10      14       1       21.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      14      20        0.0%
DATA                 0      0      14       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon May  1 23:56:10 2017

                      _a 0013                        _b 0011                       l21 093C  
                     l19 0922                       l49 08E0                       u77 08F4  
                     u87 0898                       u97 09E2              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
                    l670 0924                      l738 099A                      l762 0842  
                    l676 093E                      l758 0822             __CFG_CPB$OFF 000000  
                    u107 092A                      u117 0944             __CFG_CPD$OFF 000000  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_WDT$OFF 000000  
                   STR_1 0801                     STR_2 080F                     _main 08A4  
                   fsr1l 000FE1                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0001                    _PORTD 000F83  
                  _PORTE 000F84            __CFG_USBDIV$1 000000                    _TRISD 000F95  
                  _TRISE 000F96            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 08A4  
         __CFG_EBTRB$OFF 000000                    _setAB 09AC          __end_of_sendCMD 09EE  
        __end_of_setLine 09AC                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000          __initialization 0950  
           __end_of_main 08E2                   ??_main 0011            __activetblptr 000001  
                 ?_setAB 0009           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
                 _enable 091A                ??_initLCD 0005                   setAB@c 0009  
                 setAB@d 000B             __pdataCOMRAM 0011                ??_sendCMD 0004  
              ??_setLine 0009             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8         __end_of_writeLCD 0862  
             __accesstop 0060  __end_of__initialization 0970            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_setAB 09D2                  ??_setAB 000D  
                ?_enable 0001          __CFG_VREGEN$OFF 000000       __size_of_writeChar 0038  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
        __size_of_enable 0036                  __pcinit 0950                  __ramtop 0800  
              ?_writeLCD 000B                  __ptext0 08A4                  __ptext1 0818  
                __ptext2 08E2                  __ptext3 09AC                  __ptext4 097E  
                __ptext5 0862                  __ptext6 09D2                  __ptext7 091A  
                _initLCD 0862                  _sendCMD 09D2                  _setLine 097E  
   end_of_initialization 0970                  postdec1 000FE5                  postinc0 000FEE  
             ??_writeLCD 000D                _PORTEbits 000F84        __end_of_writeChar 091A  
           sendCMD@value 0002            __pidataCOMRAM 09EE           __end_of_enable 0950  
    start_initialization 0950                 ??_enable 0001         __CFG_LPT1OSC$OFF 000000  
               ?_initLCD 0001              __smallconst 0800        __size_of_writeLCD 004A  
               ?_sendCMD 0002                 ?_setLine 0005           __size_of_setAB 0026  
       __CFG_WDTPS$32768 000000                _writeChar 08E2                copy_data0 0964  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0800  
       __size_of_initLCD 0042         __size_of_sendCMD 001C         __size_of_setLine 002E  
             ?_writeChar 0001           writeChar@value 000A            __size_of_main 003E  
               _writeLCD 0818    __CFG_CPUDIV$OSC1_PLL2 000000                 setLine@a 0005  
               setLine@b 0007                writeLCD@a 000B                writeLCD@i 000F  
            ??_writeChar 0009  
